I chose to implement a linked list with priority for the 
user's history. I implemented a modified version of a 
regular linked list, where each node has a String value 
and an integer frequency. Words are added to the end of 
the list, and there is no remove function. When the 
frequency of a word goes up, the list is balanced by 
swapping that node out with another one.

I originally had planned to make another DLB for the 
user's history, but I knew that implementing some kind of
priority of words would require a lot of engineering effort 
(and involve searching up to the entire trie). I assumed 
that the user's history would be relatively small, since it 
is dependent on the user input words by hand, and it ends 
when the program does. The lookup of an item in a linked 
list, `O(n)`, wouldn't make a noticable difference with such 
a small list size. The add method is similarly `O(n)`, to first 
find if it exists, then swap it out to balance. I wrote my 
own code for this and use nothing from the Java standard 
library.

I also used Java's `ArrayList` to store the possible 
suggestions. Adding to the `ArrayList` is `O(1)`, since
the size of the underlying array is bounded above by 5.
This means that adding to the `ArrayList`has an extremely 
negligible affect on the program runtime. 
